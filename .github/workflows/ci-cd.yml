name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend tests and linting
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: portfolio_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend linting
        working-directory: ./backend
        run: npm run lint || echo "No lint script defined"

      - name: Initialize test database
        working-directory: ./backend
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: portfolio_test
          JWT_SECRET: test_jwt_secret_for_ci_cd_pipeline_only
          SESSION_SECRET: test_session_secret_for_ci_cd_pipeline_only
        run: npm run init-db || echo "Database initialization skipped"

  # Frontend tests and build
  frontend-test:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: portfolio/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./portfolio
        run: npm ci

      - name: Run linting
        working-directory: ./portfolio
        run: npm run lint

      - name: Type check
        working-directory: ./portfolio
        run: npm run type-check

      - name: Build frontend
        working-directory: ./portfolio
        env:
          VITE_API_URL: https://api.example.com
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: portfolio/dist
          retention-days: 7

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Audit backend dependencies
        working-directory: ./backend
        run: npm audit --audit-level=moderate || true

      - name: Audit frontend dependencies
        working-directory: ./portfolio
        run: npm audit --audit-level=moderate || true

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: portfolio-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./portfolio
          file: ./portfolio/Dockerfile
          push: false
          tags: portfolio-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Notify on completion
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-audit, docker-build]
    if: always()

    steps:
      - name: Check job status
        run: |
          if [ "${{ needs.backend-test.result }}" == "failure" ] || \
             [ "${{ needs.frontend-test.result }}" == "failure" ] || \
             [ "${{ needs.security-audit.result }}" == "failure" ] || \
             [ "${{ needs.docker-build.result }}" == "failure" ]; then
            echo "❌ Some jobs failed"
            exit 1
          else
            echo "✅ All jobs passed"
          fi
