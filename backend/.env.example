# ================================
# PORTFOLIO BACKEND CONFIGURATION
# ================================
# Copy this file to .env and fill in your values
# NEVER commit .env to Git!

# ================================
# ENVIRONMENT
# ================================
NODE_ENV=development
# Options: development, production

PORT=5000
# The port your backend runs on locally

# ================================
# DATABASE CONFIGURATION (SUPABASE)
# ================================
# PostgreSQL connection string from Supabase
# For local development, use your Supabase connection string
# For production (Render), use the POOLER connection string for better performance
# 
# Format: postgresql://postgres.[PROJECT-REF]:[PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres
# Get this from: Supabase Dashboard → Settings → Database → Connection Pooling

DATABASE_URL=postgresql://postgres:your-password@db.xxx.supabase.co:5432/postgres

# Legacy MySQL config (no longer used)
# DB_HOST=localhost
# DB_USER=root
# DB_PASSWORD=your_password_here
# DB_NAME=portfolio_db
# DB_PORT=3306

# ================================
# FRONTEND CONFIGURATION
# ================================
FRONTEND_URL=http://localhost:5173
# Your frontend URL
# Local: http://localhost:5173 or http://localhost:3000
# Production: https://your-portfolio.vercel.app

BACKEND_URL=http://localhost:5000
# Your backend URL (change to Render URL in production)

# ================================
# CORS CONFIGURATION
# ================================
CORS_ORIGINS=http://localhost:5173,http://localhost:3000
# Comma-separated list of allowed origins

# ================================
# JWT & SESSION SECRETS
# ================================
# Generate secure random strings for production:
# node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"

JWT_SECRET=change_this_to_a_secure_random_string_minimum_32_characters
# Secret key for signing JWT tokens (32+ characters)

SESSION_SECRET=change_this_to_another_secure_random_string_minimum_32_characters
# Secret key for session management (32+ characters, different from JWT_SECRET)

JWT_EXPIRES_IN=24h
# JWT token expiration time (e.g., 24h, 7d, 30d)

# ================================
# RATE LIMITING
# ================================
RATE_LIMIT_WINDOW_MS=900000
# Time window in milliseconds (default: 15 minutes)

RATE_LIMIT_MAX_REQUESTS=100
# Maximum number of requests per window per IP

# ================================
# EMAIL CONFIGURATION
# ================================
# For Gmail: Enable 2FA and generate an "App Password"
# https://myaccount.google.com/apppasswords

SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your_email@gmail.com
SMTP_PASS=your_app_specific_password

EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_app_specific_password
EMAIL_FROM=your_email@gmail.com
EMAIL_TO=your_email@gmail.com

NOTIFICATION_EMAIL=your_email@gmail.com
# Where contact form submissions will be sent

# ================================
# HELPFUL COMMANDS
# ================================
# Initialize database:
#   npm run init-db
#
# Create admin user:
#   node setup-super-admin.js
#
# Test email:
#   npm run test-email
#
# Start development server:
#   npm run dev
#
# Start production server:
#   npm start
